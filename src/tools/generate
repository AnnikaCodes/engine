#!/usr/bin/env node
'use strict';

// TODO: could alternatively use Makefile for checking changes to templates

const fs = require('fs');
const path = require('path');
const fetch = require('node-fetch');

const {Dex} = require('@pkmn/dex');
const {Generations} = require('@pkmn/data');

const pret = 'https://raw.githubusercontent.com/pret/pokered/master/';
const out = path.resolve(__dirname, '../lib/gen1/data');

const toEnum = s => s.replace(/[^A-Za-z0-9]+/g, '');

const UPDATE = process.argv.length > 2;
const PREAMBLE = '//! Code generated by `tools/generate` - manual edits will be overwritten.\n';

async function moveIDs(gen) {
  const txt = path.resolve(__dirname, 'data/moves.txt');

  if (UPDATE) {
    try {
      const moves = [];
      const asm = await (await fetch(`${pret}/data/moves/moves.asm`)).text();
      for (const line of asm.split('\n')) {
        const match = /move (\w+),/.exec(line);
        if (match) {
          const token = match[1] === 'PSYCHIC_M' ? 'PSYCHIC' : match[1];
          moves.push(toEnum(gen.moves.get(token).name));
        }
      }
      fs.writeFileSync(txt, moves.join('\n') + '\n');
      return moves;
    } catch (err) {
      console.error(err);
    }
  }

  const moves = [];
  for (const line of fs.readFileSync(txt, 'utf8').split('\n')) {
    if (!line) continue;
    moves.push(line.trim());
  }
  return moves;
}

async function speciesIDs(gen) {
  const txt = path.resolve(__dirname, 'data/species.txt');

  if (UPDATE) {
    try {
      const species = [];
      const asm = await (await fetch(`${pret}/constants/pokedex_constants.asm`)).text();
      for (const line of asm.split('\n')) {
        const match = /const DEX_(\w+)/.exec(line);
        if (match) species.push(toEnum(gen.species.get(match[1]).name));
      }
      fs.writeFileSync(txt, species.join('\n') + '\n');
      return species;
    } catch (err) {
      console.error(err);
    }
  }

  const species = [];
  for (const line of fs.readFileSync(txt, 'utf8').split('\n')) {
    if (!line) continue;
    species.push(line.trim());
  }
  return species;
}

(async () => {
const gens = new Generations(Dex);
const GEN1 = gens.get(1);

const TYPES = [
  'Normal', 'Fighting', 'Flying', 'Poison', 'Ground', 'Rock', 'Bug', 'Ghost',
  'Fire', 'Water', 'Grass', 'Electric', 'Psychic', 'Ice', 'Dragon'
];
const EFFECTIVENESS = []; {
  for (const t1 of TYPES) {
    const type1 = GEN1.types.get(t1);
    const effectiveness = [];
    for (const t2 of TYPES) {
      const e = type1.effectiveness[t2];
      if (e === 2) {
        effectiveness.push('S');
      } else if (e == 1) {
        effectiveness.push('N');
      } else  if (e === 0.5) {
        effectiveness.push('R');
      } else {
        effectiveness.push('I');
      }
    }
    EFFECTIVENESS.push(`[_]Effectiveness{ ${effectiveness.join(', ')} }, // ${t1}`);
  }
}
const types = `${PREAMBLE}
const assert = @import("std").debug.assert;
const Effectiveness = @import("../../gen1/data.zig").Effectiveness;

/// Type constants representing all non-glitch types.
///
/// **NOTE**: these do *not* match the in-game values (eg. there is no gap between
/// the Physical and Special types).
///
/// *See:* https://pkmn.cc/pokered/constants/type_constants.asm
///
pub const Type = enum(u4) {
    ${TYPES.join(',\n    ')},

    comptime {
        assert(@bitSizeOf(Type) == 4);
    }

    pub fn effectiveness(t1: Type, t2: Type) Effectiveness {
        return TYPE_CHART[@enumToInt(t1)][@enumToInt(t2)];
    }
};

// TODO: [2]Type
pub const Types = packed struct {
    type1: Type,
    type2: Type,

    comptime {
        assert(@sizeOf(Types) == 1);
    }
};

const S = Effectiveness.Super;
const N = Effectiveness.Neutral;
const R = Effectiveness.Resisted;
const I = Effectiveness.Immune;

/// Type chart, organizated in terms of damage-dealt like on the cartridge. However,
/// unlike in-game we store the entire table as a multidimensional array for faster
/// queries (the cartridge's approach of only listing non-neutral matchups saves memory
/// but requires linear scanning for lookups).
///
/// **NOTE**: Pokémon Showdown stores its type chart in the reverse order (ie. damage-dealt).
///
/// *See:* ttps://pkmn.cc/pokered/data/types/type_matchups.asm
///
const TYPE_CHART = [${TYPES.length}][${TYPES.length}]Effectiveness{
    ${EFFECTIVENESS.join('\n    ')}
};
`;

fs.writeFileSync(path.join(out, 'types.zig'), types);

const MOVE_IDS = await moveIDs(GEN1);
const MOVES = [];
for (const name of MOVE_IDS) {
  const move = GEN1.moves.get(name);
  MOVES.push(`Move{
    // ${name}
    .bp = ${move.basePower},
    .type = .${move.type === '???' ? 'Normal' : move.type},
    .accuracy = ${move.accuracy === true ? '100' : move.accuracy},
    .pp = ${move.pp / 5}, // * 5 = ${move.pp}
}`);
}
const moves = `${PREAMBLE}
const std = @import("std");
const data = @import("../data.zig");

const assert = std.debug.assert;

const Move = data.Move;
const Type = data.Type;

/// Move constants representing all legal moves, plus the sentinel \`None\`.
/// The sentinal value is guaranteed to be bit-equivalent to \`0\` and can be
/// used to represent a null-pointer equivalent without using the additional
/// byte that \`?Moves\` would entail.
///
/// *See:* https://pkmn.cc/pokered/constants/move_constants.asm
///
pub const Moves = enum(u8) {
    None,
    ${MOVE_IDS.join(',\n    ')},

    comptime {
        assert(@sizeOf(Moves) == 1);
    }

    pub fn get(id: Moves) Move {
        assert(id != .None);
        return MOVES[@enumToInt(id) - 1];
    }
};

// TODO: add effect handler data
/// Basic raw move data - names and descriptions are handled elswhere.
///
/// **NOTE:** this data differs from Pokémon Showdown:
///
///   - Bide has \`Normal\`-type instead of \`???\`-type
///   - moves which always hit have \`accuracy\` of \`100\` instead of \`true\`
///   - numerous fields (volatiles, multihit, etc) are handled differently and
///     thus do not appear in the data definitions below
///
/// *See:* https://pkmn.cc/pokered/data/moves/moves.asm
///
const MOVES = [_]Move{ ${MOVES.join(', ')} };
`;

fs.writeFileSync(path.join(out, 'moves.zig'), moves);

const SPECIES_IDS = await speciesIDs(GEN1);

const species = `${PREAMBLE}
const std = @import("std");
const data = @import("../data.zig");

const assert = std.debug.assert;

const Specie = data.Specie;
const Stats = data.Stats;
const Types = data.Types;

/// Species constants representing all legal moves, plus the sentinel \`None\`.
/// The sentinal value is guaranteed to be bit-equivalent to \`0\` and can be
/// used to represent a null-pointer equivalent without using the additional
/// byte that \`?Species\` would entail.
///
/// *See:* https://pkmn.cc/pokered/constants/pokedex_constants.asm
///
pub const Species = enum(u8) {
    None,
    ${SPECIES_IDS.join(',\n    ')},

    comptime {
        assert(@sizeOf(Species) == 1);
    }
};
`;

fs.writeFileSync(path.join(out, 'species.zig'), species);
})().catch(err => {
  console.error(err);
  process.exit(1);
});
