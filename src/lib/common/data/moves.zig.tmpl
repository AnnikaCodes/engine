//! Code generated by `tools/generate` - manual edits will be overwritten

const std = @import("std");

const gen{{{ gen }}} = @import("../../gen{{{ gen }}}/data.zig");

const assert = std.debug.assert;

const Type = gen{{{ gen }}}.Type;

pub const Move = enum({{{ Move.type }}}) {
    None,
    {{{ Move.values }}},

    {{{ Move.Data }}}

    const DATA = [_]Data{
        {{{ Move.data }}},
    };
{{{ Move.Effect }}}
    const Target = enum({{{ Move.targetType }}}) {
        // none
        All,
        AllySide,
        Field,
        Self,
        // resolve
        AllOthers,
        Depends,
        Other,
        Any,
        Allies,
        Ally,
        AllyOrSelf,
        Foe,
        // resolve + run
        Foes,
        FoeSide,
        RandomFoe,
    };
{{{ Move.ppData }}}
    comptime {
        assert(@sizeOf(Move) == {{{ Move.size }}});
        assert(@sizeOf(@TypeOf(DATA)) == {{{ Move.dataSize }}});
    }

    pub const size = {{{ Move.num }}};

    pub inline fn get(id: Move) Data {
        {{{ Move.assert }}}
        return DATA[@enumToInt(id) - 1];
    }

    const Event = enum { resolve, run };{{{ Move.ppFn }}}
};
