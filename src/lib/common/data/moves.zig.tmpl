const std = @import("std");
const data = @import("../data.zig");

const assert = std.debug.assert;

const Move = data.Move;
const Type = data.Type;

/// Move constants representing all legal moves, plus the sentinel \`None\`.
/// The sentinel value is guaranteed to be bit-equivalent to \`0\` and can be
/// used to represent a null-pointer equivalent without using the additional
/// byte that \`?Moves\` would entail.
///
/// {{ Moves_comment }}
///
pub const Moves = enum({{ Moves_type }}) {
    None,
    {{ Moves }}

    comptime {
        assert(@bitSizeOf(Moves) == {{ Moves_size }});
    }

    pub fn get(id: Moves) *const Move {
        assert(id != .None);
        return &MOVES[@enumToInt(id) - 1];
    }
};

// TODO: add effect handler data
/// Basic raw move data - names and descriptions are handled elswhere.
///
/// {{ MOVES_comment }}
///
const MOVES = [_]Move{
    {{ MOVES }}
};
