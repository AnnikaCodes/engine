//! Code generated by `tools/generate` - manual edits will be overwritten

const std = @import("std");
const data = @import("../../gen{{{ gen }}}/data.zig");

const assert = std.debug.assert;

const Type = data.Type;

pub const Items = enum({{{ Items.type }}}) {
    None,
    {{{ Items.values }}}

    comptime {
        assert(@sizeOf(Items) == {{{ Items.size }}});
    }

    pub fn boost(item: Items) ?Type {
        assert(item != .None);
        if (item == .PolkadotBow) return .Normal;
        return if (@enumToInt(item) <= {{{ Items.boosts }}}) @intToEnum(Type, @enumToInt(item) - 1) else null;
    }

    pub fn berry(item: Items) bool {
        assert(item != .None);
        return @enumToInt(item) > {{{ Items.berry }}};
    }
};
