//! Code generated by `tools/generate` - manual edits will be overwritten

const std = @import("std");

const gen1 = @import("../../gen1/data.zig");

const assert = std.debug.assert;
const Effectiveness = gen1.Effectiveness;

const S = Effectiveness.Super;
const N = Effectiveness.Neutral;
const R = Effectiveness.Resisted;
const I = Effectiveness.Immune;

pub const Type = enum({{{ Type.type }}}) {
    {{{ Type.values }}},

    const chart = [{{{ Type.num }}}][{{{ Type.num }}}]Effectiveness{
        {{{ Type.chart }}}
    };

    comptime {
        assert(@bitSizeOf(Type) == {{{ Type.bitSize }}});
        assert(@sizeOf(@TypeOf(chart)) == {{{ Type.chartSize }}});
    }

    pub fn effectiveness(t1: Type, t2: Type) Effectiveness {
        return chart[@enumToInt(t1)][@enumToInt(t2)];
    }
};

pub const Types = {{{ Types.qualifier }}} struct {
    type1: Type = .Normal,
    type2: Type = .Normal,

    comptime {
        assert(@bitSizeOf(Types) == {{{ Types.bitSize }}});
    }

    pub fn immune(self: Types, t: Type) bool {
        return t.effectiveness(self.type1) == I or t.effectiveness(self.type2) == I;
    }

    pub fn includes(self: Types, t: Type) bool {
        return self.type1 == t or self.type2 == t;
    }
};
