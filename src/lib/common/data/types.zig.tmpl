//! Code generated by `tools/generate` - manual edits will be overwritten

const std = @import("std");
const gen1 = @import("../../gen1/data.zig");

const assert = std.debug.assert;
const Effectiveness = gen1.Effectiveness;

pub const Type = enum({{{ Type.type }}}) {
    {{{ Type.values }}},

    comptime {
        assert(@bitSizeOf(Type) == {{{ Type.bitSize }}});
    }

    pub fn effectiveness(t1: Type, t2: Type) Effectiveness {
        return TYPE_CHART[@enumToInt(t1)][@enumToInt(t2)];
    }
};

pub const Types = packed struct {
    type1: Type,
    type2: Type,

    comptime {
        assert(@bitSizeOf(Types) == {{{ Types.bitSize }}});
    }
};

const S = Effectiveness.Super;
const N = Effectiveness.Neutral;
const R = Effectiveness.Resisted;
const I = Effectiveness.Immune;

const TYPE_CHART = [{{{ Types.num }}}][{{{ Types.num }}}]Effectiveness{
    {{{ Types.chart }}}
};
