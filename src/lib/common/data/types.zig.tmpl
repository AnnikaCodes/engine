const std = @import("std");

const assert = std.debug.assert;

/// Type constants representing all non-glitch types.
///
/// {{ Type_comment }}
///
pub const Type = enum({{ Type_type }}) {
    {{ Type }}

    comptime {
        assert(@bitSizeOf(Type) == {{ Type_size }});
    }

    pub fn effectiveness(t1: Type, t2: Type) Efffectiveness {
        var e = @enumToInt(TYPE_CHART[@enumToInt(t1)][@enumToInt(t2)]);
        // NOTE: must be cmov to avoid branches
        return if (e == 3) 20 else num * 5;
    }

    // FIXME conditionally add hiddenPower for approriate gens (3 different formulas, DVs, IVs, gen 6+)
    // https://bulbapedia.bulbagarden.net/wiki/Hidden_Power_(move)/Calculation
};

// FIXME Types

const S = Efffectiveness.Super;
const N = Efffectiveness.Neutral;
const R = Efffectiveness.Resisted;
const I = Efffectiveness.Immune;

/// Type chart, organizated in terms of damage-dealt like on the cartridge. However,
/// unlike in-game we store the entire table as a multidimensional array for faster
/// queries (the cartridge's approach of only listing non-neutral matchups saves memory
/// but requires linear scanning for lookups).
///
/// **NOTE**: Pok√©mon Showdown stores its type chart in the reverse order (ie. damage-dealt).
///
/// {{ TYPE_CHART_comment }}
///
const TYPE_CHART = [{{ NUM_TYPES }}][{{ NUM_TYPES }}]Efffectiveness{
    {{ TYPE_CHART }}
};
